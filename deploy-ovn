#!/bin/bash -e

sudo vagrant ssh master -c "sudo dnf install -y python"
master_ip=$(sudo vagrant ssh master -c "python -c 'import socket, sys; sys.stdout.write(socket.gethostbyname(socket.gethostname()))'")

key_file=/var/lib/kubelet/pki/kubelet.key
cert_file=/var/lib/kubelet/pki/kubelet.crt
ca_file=/var/lib/kubelet/pki/kubelet-client-current.pem

vagrant ssh master -c "
sudo dnf install http://resources.ovirt.org/pub/yum-repo/ovirt-release-master.rpm &&
sudo dnf install ovirt-provider-ovn &&
sudo bash -c 'cat <<EOF > /etc/ovirt-provider-ovn/conf.d/kubernetes.conf
[SSL]
https-enabled=false
#ssl-key-file=${key_file}
#ssl-cert-file=${cert_file}
#ssl-cacert-file=${master_ca_file}
[OVN REMOTE]
ovn-remote=127.0.0.1:6641
[AUTH]
auth-plugin=auth.plugins.static_token:NoAuthPlugin
EOF' &&
sudo ovn-sbctl set-connection ptcp:6642 &&
sudo ovn-nbctl set-connection ptcp:6641 &&
sudo systemctl enable ovirt-provider-ovn &&
sudo systemctl restart ovirt-provider-ovn
"

FAIL=0

HOSTS=( node1 node2 )
for node in "${HOSTS[@]}"; do
    (
        sudo vagrant ssh $node -c "sudo dnf install -y python" &&
        node_ip=$(sudo vagrant ssh $node -c "python -c 'import socket, sys; sys.stdout.write(socket.gethostbyname(socket.gethostname()))'") &&
        vagrant ssh $node -c "
sudo dnf install -y openvswitch-ovn-host &&
sudo systemctl start openvswitch &&
sudo ovs-vsctl set open . external-ids:ovn-remote=tcp:${master_ip}:6642 &&
sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve &&
sudo ovs-vsctl set open . external-ids:ovn-encap-ip=${node_ip} &&
sudo bash -c 'cat <<EOF > /etc/sysconfig/ovn-controller
# this file is auto-generated by ovirt-provider-ovn-driver
#OVN_CONTROLLER_OPTS=\"--ovn-controller-ssl-key=${key_file} --ovn-controller-ssl-cert=${cert_file} --ovn-controller-ssl-ca-cert=${client_ca_file}\"
EOF' &&
sudo systemctl enable openvswitch &&
sudo systemctl enable ovn-controller &&
sudo systemctl restart openvswitch &&
sudo systemctl restart ovn-controller
        "
    ) &
done

for job in $(jobs -p); do
    echo $job
    wait $job || let "FAIL+=1"
done

if [ "$FAIL" != "0" ]; then
    echo "Nodes installation failed $FAIL times"
    exit 1
fi
